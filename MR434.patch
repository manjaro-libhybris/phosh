From 74f99c3e0a538b8e95ff5a2a93a150521359fc9d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Wed, 5 Aug 2020 16:07:16 +0200
Subject: [PATCH 1/6] rotateinfo: Fix indentation
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/rotateinfo.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/rotateinfo.c b/src/rotateinfo.c
index 5cd3ccf7..b673fa3d 100644
--- a/src/rotateinfo.c
+++ b/src/rotateinfo.c
@@ -59,7 +59,7 @@ set_state (PhoshRotateInfo *self)
   monitor_is_landscape = ((double)monitor->width / (double)monitor->height) > 1.0;
   portrait = monitor_is_landscape ? !portrait : portrait;
 
-  g_debug ("Potrait: %d, width: %d, height: %d", portrait, monitor->width , monitor->height);
+  g_debug ("Potrait: %d, width: %d, height: %d", portrait, monitor->width, monitor->height);
   if (portrait) {
     phosh_status_icon_set_icon_name (PHOSH_STATUS_ICON (self), "screen-rotation-portrait-symbolic");
     phosh_status_icon_set_info (PHOSH_STATUS_ICON (self), _("Portrait"));
-- 
GitLab


From de3c25f1c465977d620c09b80d0991e46faa63be Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 7 Jan 2021 16:39:12 +0100
Subject: [PATCH 2/6] shell: Create sensor-manager early
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We want that before the panels since those might use other
managers that need the sensor-manager (e.g. rotation-manager)

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/shell.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/shell.c b/src/shell.c
index 0aad5403..cb596b45 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -469,6 +469,8 @@ setup_idle_cb (PhoshShell *self)
   priv->session_manager = phosh_session_manager_new ();
   priv->mode_manager = phosh_mode_manager_new ();
 
+  priv->sensor_proxy_manager = phosh_sensor_proxy_manager_get_default_failable ();
+
   panels_create (self);
   /* Create background after panel since it needs the panel's size */
   priv->background_manager = phosh_background_manager_new ();
@@ -502,8 +504,8 @@ setup_idle_cb (PhoshShell *self)
   if (priv->sensor_proxy_manager) {
     priv->proximity = phosh_proximity_new (priv->sensor_proxy_manager,
                                            priv->lockscreen_manager);
-    /* TODO: accelerometer */
   }
+
   priv->mount_manager = phosh_mount_manager_new ();
 
   phosh_session_manager_register (priv->session_manager,
-- 
GitLab


From b41cec12fac88543345a0b7c1260e3154c5dcdec Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 7 Jan 2021 16:36:12 +0100
Subject: [PATCH 3/6] shell: Don't bother with accelerometer
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Rotation-manager takes care of that

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/shell.c | 7 -------
 1 file changed, 7 deletions(-)

diff --git a/src/shell.c b/src/shell.c
index cb596b45..0bcf6558 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -340,13 +340,6 @@ phosh_shell_dispose (GObject *object)
   PhoshShell *self = PHOSH_SHELL (object);
   PhoshShellPrivate *priv = phosh_shell_get_instance_private(self);
 
-  if (priv->sensor_proxy_manager) {
-    phosh_dbus_sensor_proxy_call_release_accelerometer_sync (
-      PHOSH_DBUS_SENSOR_PROXY(priv->sensor_proxy_manager),
-      NULL, NULL);
-      g_clear_object (&priv->sensor_proxy_manager);
-  }
-
   panels_dispose (self);
   g_clear_pointer (&priv->faders, g_ptr_array_unref);
 
-- 
GitLab


From 747ad8b1746032619140695a0c22178a937c3a49 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Tue, 23 Jun 2020 14:05:57 +0200
Subject: [PATCH 4/6] Add rotation-manager
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The rotation manager listens to device orientation changes
and adjusts the primary display accordingly.

This interfaces with lockscreen, iio-sensor-proxy and
gsettings to figure out the correct screen orientation.

The manager has two modes: off (don't rotate any output) and sensor
(adjust due to sensor values).

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 docs/phosh-docs.xml    |   1 +
 src/meson.build        |   3 +
 src/phosh-enums.c.in   |   1 +
 src/rotation-manager.c | 449 +++++++++++++++++++++++++++++++++++++++++
 src/rotation-manager.h |  39 ++++
 src/shell.c            |  21 ++
 src/shell.h            |   2 +
 7 files changed, 516 insertions(+)
 create mode 100644 src/rotation-manager.c
 create mode 100644 src/rotation-manager.h

diff --git a/docs/phosh-docs.xml b/docs/phosh-docs.xml
index 0cb7ce64..b6beaa39 100644
--- a/docs/phosh-docs.xml
+++ b/docs/phosh-docs.xml
@@ -101,6 +101,7 @@
       <xi:include href="xml/proximity.xml"/>
       <xi:include href="xml/quick-setting.xml"/>
       <xi:include href="xml/rotateinfo.xml"/>
+      <xi:include href="xml/rotation-manager.xml"/>
       <xi:include href="xml/screen-saver-manager.xml"/>
       <xi:include href="xml/sensor-proxy-manager.xml"/>
       <xi:include href="xml/session-manager.xml"/>
diff --git a/src/meson.build b/src/meson.build
index bb04e5e8..dd505414 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -23,6 +23,7 @@ phosh_enum_headers = [
   'notifications/notification.h',
   'notifications/notify-manager.h',
   'phosh-wayland.h',
+  'rotation-manager.h',
   'shell.h',
 ] + schema_enum_headers
 
@@ -160,6 +161,8 @@ libphosh_sources = [
   'polkit-auth-prompt.h',
   'proximity.h',
   'proximity.c',
+  'rotation-manager.h',
+  'rotation-manager.c',
   'sensor-proxy-manager.c',
   'sensor-proxy-manager.h',
   'rotateinfo.c',
diff --git a/src/phosh-enums.c.in b/src/phosh-enums.c.in
index f001d726..293b97d9 100644
--- a/src/phosh-enums.c.in
+++ b/src/phosh-enums.c.in
@@ -11,6 +11,7 @@
 #include "notifications/notification.h"
 #include "notifications/notify-manager.h"
 #include "phosh-wayland.h"
+#include "rotation-manager.h"
 #include "shell.h"
 #include "wwan/phosh-wwan-backend.h"
 
diff --git a/src/rotation-manager.c b/src/rotation-manager.c
new file mode 100644
index 00000000..327af071
--- /dev/null
+++ b/src/rotation-manager.c
@@ -0,0 +1,449 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ * Author: Guido Günther <agx@sigxcpu.org>
+ */
+
+#define G_LOG_DOMAIN "phosh-rotation-manager"
+
+#include "config.h"
+#include "rotation-manager.h"
+#include "shell.h"
+#include "sensor-proxy-manager.h"
+#include "util.h"
+
+#define ORIENTATION_LOCK_SCHEMA_ID "org.gnome.settings-daemon.peripherals.touchscreen"
+#define ORIENTATION_LOCK_KEY       "orientation-lock"
+
+/**
+ * SECTION:rotation-manager
+ * @short_description: The Rotation Manager
+ * @Title: PhoshRotationManager
+ *
+ * #PhoshRotationManager is responsible for interfacing with
+ * #PhoshSensorProxyManager to set the correct orientation of thex
+ * #built-in display taking the #PhoshLockscreenManager's
+ * #PhoshLockscreenManager:locked status and the orientation-lock
+ * #GSettings and the current #PhoshRotationManagerMode into account.
+ */
+
+enum {
+  PROP_0,
+  PROP_SENSOR_PROXY_MANAGER,
+  PROP_LOCKSCREEN_MANAGER,
+  PROP_ORIENTATION_LOCKED,
+  PROP_MODE,
+  LAST_PROP,
+};
+static GParamSpec *props[LAST_PROP];
+
+typedef struct _PhoshRotationManager {
+  GObject                  parent;
+
+  gboolean                 claimed;
+  PhoshSensorProxyManager *sensor_proxy_manager;
+  PhoshLockscreenManager  *lockscreen_manager;
+
+  GSettings               *settings;
+  gboolean                 orientation_locked;
+
+  PhoshRotationManagerMode mode;
+} PhoshRotationManager;
+
+G_DEFINE_TYPE (PhoshRotationManager, phosh_rotation_manager, G_TYPE_OBJECT);
+
+/**
+ * match_orientation:
+ * @self: The #PhoshRotationManager
+ *
+ * Match the screen orientation to the sensor output.
+ * Do nothing if orientation lock is on or there's no
+ * sensor claimed.
+ */
+static void
+match_orientation (PhoshRotationManager *self)
+{
+  PhoshShell *shell = phosh_shell_get_default ();
+  const gchar *orient;
+  PhoshMonitorTransform transform;
+
+  if (self->orientation_locked || !self->claimed ||
+      self->mode == PHOSH_ROTATION_MANAGER_MODE_OFF)
+    return;
+
+  orient = phosh_dbus_sensor_proxy_get_accelerometer_orientation (
+    PHOSH_DBUS_SENSOR_PROXY (self->sensor_proxy_manager));
+
+  g_debug ("Orientation changed: %s, locked: %d, claimed: %d",
+           orient, self->orientation_locked, self->claimed);
+
+  if (!g_strcmp0 ("normal", orient)) {
+    transform = PHOSH_MONITOR_TRANSFORM_NORMAL;
+  } else if (!g_strcmp0 ("right-up", orient)) {
+    transform = PHOSH_MONITOR_TRANSFORM_270;
+  } else if (!g_strcmp0 ("bottom-up", orient)) {
+    transform = PHOSH_MONITOR_TRANSFORM_180;
+  } else if (!g_strcmp0 ("left-up", orient)) {
+    transform = PHOSH_MONITOR_TRANSFORM_90;
+  } else if (!g_strcmp0 ("undefined", orient)) {
+    return; /* just leave as is */
+  } else {
+    g_warning ("Unknown orientation '%s'", orient);
+    return;
+  }
+  phosh_shell_set_transform (shell, transform);
+}
+
+static void
+on_accelerometer_claimed (PhoshSensorProxyManager *sensor_proxy_manager,
+                          GAsyncResult            *res,
+                          PhoshRotationManager    *self)
+{
+  g_autoptr (GError) err = NULL;
+  gboolean success;
+
+  g_return_if_fail (PHOSH_IS_SENSOR_PROXY_MANAGER (sensor_proxy_manager));
+  g_return_if_fail (PHOSH_IS_ROTATION_MANAGER (self));
+  g_return_if_fail (sensor_proxy_manager == self->sensor_proxy_manager);
+
+  success = phosh_dbus_sensor_proxy_call_claim_accelerometer_finish (
+    PHOSH_DBUS_SENSOR_PROXY (sensor_proxy_manager),
+    res, &err);
+  if (success) {
+    g_debug ("Claimed accelerometer");
+    self->claimed = TRUE;
+  } else {
+    g_warning ("Failed to claim accelerometer: %s", err->message);
+  }
+  match_orientation (self);
+  g_object_unref (self);
+}
+
+static void
+on_accelerometer_released (PhoshSensorProxyManager *sensor_proxy_manager,
+                           GAsyncResult            *res,
+                           PhoshRotationManager    *self)
+{
+  g_autoptr (GError) err = NULL;
+  gboolean success;
+
+  g_return_if_fail (PHOSH_IS_SENSOR_PROXY_MANAGER (sensor_proxy_manager));
+  g_return_if_fail (PHOSH_IS_ROTATION_MANAGER (self));
+  g_return_if_fail (sensor_proxy_manager == self->sensor_proxy_manager);
+
+  success = phosh_dbus_sensor_proxy_call_release_accelerometer_finish (
+    PHOSH_DBUS_SENSOR_PROXY (sensor_proxy_manager),
+    res, &err);
+  if (success) {
+    g_debug ("Released rotation sensor");
+    self->claimed = FALSE;
+  } else {
+    g_warning ("Failed to release rotation sensor: %s", err->message);
+  }
+  g_object_unref (self);
+}
+
+static void
+phosh_rotation_manager_claim_accelerometer (PhoshRotationManager *self, gboolean claim)
+{
+  if (claim == self->claimed)
+    return;
+
+  if (claim) {
+    phosh_dbus_sensor_proxy_call_claim_accelerometer (
+      PHOSH_DBUS_SENSOR_PROXY (self->sensor_proxy_manager),
+      NULL,
+      (GAsyncReadyCallback)on_accelerometer_claimed,
+      g_object_ref (self));
+  } else {
+    phosh_dbus_sensor_proxy_call_release_accelerometer (
+      PHOSH_DBUS_SENSOR_PROXY (self->sensor_proxy_manager),
+      NULL,
+      (GAsyncReadyCallback)on_accelerometer_released,
+      g_object_ref (self));
+  }
+}
+
+static void
+on_has_accelerometer_changed (PhoshRotationManager    *self,
+                              GParamSpec              *pspec,
+                              PhoshSensorProxyManager *proxy)
+{
+  gboolean has_accel;
+
+  /* Don't claim during screen lock, enables runtime pm */
+  if (phosh_lockscreen_manager_get_locked (self->lockscreen_manager))
+    return;
+
+  has_accel = phosh_dbus_sensor_proxy_get_has_accelerometer (
+    PHOSH_DBUS_SENSOR_PROXY (self->sensor_proxy_manager));
+
+  g_debug ("Found %s accelerometer", has_accel ? "a" : "no");
+  phosh_rotation_manager_set_mode (self, PHOSH_ROTATION_MANAGER_MODE_SENSOR);
+}
+
+static void
+on_lockscreen_manager_locked (PhoshRotationManager *self, GParamSpec *pspec,
+                              PhoshLockscreenManager *lockscreen_manager)
+{
+  gboolean claim;
+
+  g_return_if_fail (PHOSH_IS_ROTATION_MANAGER (self));
+  g_return_if_fail (PHOSH_IS_LOCKSCREEN_MANAGER (lockscreen_manager));
+
+  if (self->mode == PHOSH_ROTATION_MANAGER_MODE_OFF)
+    claim = FALSE;
+  else
+    claim = !phosh_lockscreen_manager_get_locked (self->lockscreen_manager);
+
+  phosh_rotation_manager_claim_accelerometer (self, claim);
+}
+
+static void
+on_accelerometer_orientation_changed (PhoshRotationManager    *self,
+                                      GParamSpec              *pspec,
+                                      PhoshSensorProxyManager *sensor)
+{
+  g_return_if_fail (PHOSH_IS_ROTATION_MANAGER (self));
+  g_return_if_fail (self->sensor_proxy_manager == sensor);
+
+  match_orientation (self);
+}
+
+static void
+phosh_rotation_manager_set_property (GObject      *object,
+                                     guint         property_id,
+                                     const GValue *value,
+                                     GParamSpec   *pspec)
+{
+  PhoshRotationManager *self = PHOSH_ROTATION_MANAGER (object);
+
+  switch (property_id) {
+  case PROP_SENSOR_PROXY_MANAGER:
+    /* construct only */
+    self->sensor_proxy_manager = g_value_dup_object (value);
+    break;
+  case PROP_LOCKSCREEN_MANAGER:
+    /* construct only */
+    self->lockscreen_manager = g_value_dup_object (value);
+    break;
+  case PROP_ORIENTATION_LOCKED:
+    phosh_rotation_manager_set_orientation_locked (self,
+                                                   g_value_get_boolean (value));
+    break;
+  case PROP_MODE:
+    phosh_rotation_manager_set_mode (self, g_value_get_enum (value));
+    break;
+  default:
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    break;
+  }
+}
+
+static void
+phosh_rotation_manager_get_property (GObject    *object,
+                                     guint       property_id,
+                                     GValue     *value,
+                                     GParamSpec *pspec)
+{
+  PhoshRotationManager *self = PHOSH_ROTATION_MANAGER (object);
+
+  switch (property_id) {
+  case PROP_SENSOR_PROXY_MANAGER:
+    g_value_set_object (value, self->sensor_proxy_manager);
+    break;
+  case PROP_LOCKSCREEN_MANAGER:
+    g_value_set_object (value, self->lockscreen_manager);
+    break;
+  case PROP_ORIENTATION_LOCKED:
+    g_value_set_boolean (value, self->orientation_locked);
+    break;
+  case PROP_MODE:
+    g_value_set_enum (value, self->mode);
+    break;
+  default:
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    break;
+  }
+}
+
+static void
+phosh_rotation_manager_constructed (GObject *object)
+{
+  PhoshRotationManager *self = PHOSH_ROTATION_MANAGER (object);
+
+  G_OBJECT_CLASS (phosh_rotation_manager_parent_class)->constructed (object);
+
+  /* Don't make a fuzz if we couldn't even create the DBus proxy */
+  if (!self->sensor_proxy_manager)
+    return;
+  
+  g_signal_connect_swapped (self->lockscreen_manager,
+                            "notify::locked",
+                            (GCallback) on_lockscreen_manager_locked,
+                            self);
+
+  g_signal_connect_swapped (self->sensor_proxy_manager,
+                            "notify::accelerometer-orientation",
+                            (GCallback) on_accelerometer_orientation_changed,
+                            self);
+
+  g_signal_connect_swapped (self->sensor_proxy_manager,
+                            "notify::has-accelerometer",
+                            (GCallback) on_has_accelerometer_changed,
+                            self);
+  on_has_accelerometer_changed (self, NULL, self->sensor_proxy_manager);
+
+  self->settings = g_settings_new (ORIENTATION_LOCK_SCHEMA_ID);
+
+  g_settings_bind (self->settings,
+                   ORIENTATION_LOCK_KEY,
+                   self,
+                   "orientation-locked",
+                   G_BINDING_SYNC_CREATE
+                   | G_BINDING_BIDIRECTIONAL);
+
+}
+
+static void
+phosh_rotation_manager_dispose (GObject *object)
+{
+  PhoshRotationManager *self = PHOSH_ROTATION_MANAGER (object);
+
+  g_clear_object (&self->settings);
+
+  if (self->sensor_proxy_manager) {
+    g_signal_handlers_disconnect_by_data (self->sensor_proxy_manager,
+                                          self);
+    /* Sync call since we're going away */
+    phosh_dbus_sensor_proxy_call_release_accelerometer_sync (
+      PHOSH_DBUS_SENSOR_PROXY (self->sensor_proxy_manager), NULL, NULL);
+    g_clear_object (&self->sensor_proxy_manager);
+  }
+
+  if (self->lockscreen_manager) {
+    g_signal_handlers_disconnect_by_data (self->lockscreen_manager,
+                                          self);
+    g_clear_object (&self->lockscreen_manager);
+  }
+
+  G_OBJECT_CLASS (phosh_rotation_manager_parent_class)->dispose (object);
+}
+
+static void
+phosh_rotation_manager_class_init (PhoshRotationManagerClass *klass)
+{
+  GObjectClass *object_class = (GObjectClass *)klass;
+
+  object_class->constructed = phosh_rotation_manager_constructed;
+  object_class->dispose = phosh_rotation_manager_dispose;
+
+  object_class->set_property = phosh_rotation_manager_set_property;
+  object_class->get_property = phosh_rotation_manager_get_property;
+
+  props[PROP_SENSOR_PROXY_MANAGER] =
+    g_param_spec_object (
+      "sensor-proxy-manager",
+      "Sensor proxy manager",
+      "The object inerfacing with iio-sensor-proxy",
+      PHOSH_TYPE_SENSOR_PROXY_MANAGER,
+      G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
+
+  props[PROP_LOCKSCREEN_MANAGER] =
+    g_param_spec_object (
+      "lockscreen-manager",
+      "Lockscren manager",
+      "The object managing the lock screen",
+      PHOSH_TYPE_LOCKSCREEN_MANAGER,
+      G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
+
+  props[PROP_ORIENTATION_LOCKED] =
+    g_param_spec_boolean (
+      "orientation-locked",
+      "Screen orientation locked",
+      "Whether the screen orientation is locked",
+      TRUE,
+      G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
+
+  props[PROP_MODE] =
+    g_param_spec_enum (
+      "mode",
+      "Rotation mode",
+      "The current rotation mode",
+      PHOSH_TYPE_ROTATION_MANAGER_MODE,
+      PHOSH_ROTATION_MANAGER_MODE_OFF,
+      G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
+
+  g_object_class_install_properties (object_class, LAST_PROP, props);
+}
+
+static void
+phosh_rotation_manager_init (PhoshRotationManager *self)
+{
+}
+
+
+PhoshRotationManager *
+phosh_rotation_manager_new (PhoshSensorProxyManager *sensor_proxy_manager,
+                            PhoshLockscreenManager  *lockscreen_manager)
+{
+  return g_object_new (PHOSH_TYPE_ROTATION_MANAGER,
+                       "sensor-proxy-manager", sensor_proxy_manager,
+                       "lockscreen-manager", lockscreen_manager,
+                       NULL);
+}
+
+void
+phosh_rotation_manager_set_orientation_locked (PhoshRotationManager *self, gboolean locked)
+{
+  g_return_if_fail (PHOSH_IS_ROTATION_MANAGER (self));
+
+  if (locked == self->orientation_locked)
+    return;
+
+  self->orientation_locked = locked;
+  g_object_notify_by_pspec (G_OBJECT (self), props[PROP_ORIENTATION_LOCKED]);
+  match_orientation (self);
+}
+
+gboolean
+phosh_rotation_manager_get_orientation_locked (PhoshRotationManager *self)
+{
+  g_return_val_if_fail (PHOSH_IS_ROTATION_MANAGER (self), TRUE);
+
+  return self->orientation_locked;
+}
+
+PhoshRotationManagerMode
+phosh_rotation_manager_get_mode (PhoshRotationManager *self)
+{
+  g_return_val_if_fail (PHOSH_IS_ROTATION_MANAGER (self), PHOSH_ROTATION_MANAGER_MODE_OFF);
+
+  return self->mode;
+}
+
+void
+phosh_rotation_manager_set_mode (PhoshRotationManager *self, PhoshRotationManagerMode mode)
+{
+  g_return_if_fail (PHOSH_IS_ROTATION_MANAGER (self));
+
+  if (mode == self->mode)
+    return;
+
+  self->mode = mode;
+
+  g_debug ("Setting mode: %d", mode);
+  switch (mode) {
+  case PHOSH_ROTATION_MANAGER_MODE_OFF:
+    phosh_rotation_manager_claim_accelerometer (self, FALSE);
+    break;
+  case PHOSH_ROTATION_MANAGER_MODE_SENSOR:
+    phosh_rotation_manager_claim_accelerometer (self, TRUE);
+    break;
+  default:
+    g_assert_not_reached ();
+  }
+
+  g_object_notify_by_pspec (G_OBJECT (self), props[PROP_MODE]);
+}
diff --git a/src/rotation-manager.h b/src/rotation-manager.h
new file mode 100644
index 00000000..b505cf8e
--- /dev/null
+++ b/src/rotation-manager.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+#pragma once
+
+#include "lockscreen-manager.h"
+#include "sensor-proxy-manager.h"
+
+G_BEGIN_DECLS
+
+/**
+ * PhoshRotationManagerMode:
+ * @PHOSH_ROTATION_MANAGER_MODE_OFF: automatic rotation off
+ * @PHOSH_ROTATION_MANAGER_MODE_SENSOR: rotation driven by sensor orientation
+ *
+ * The mode of a #PhoshRotationManager
+ */
+typedef enum {
+  PHOSH_ROTATION_MANAGER_MODE_OFF,
+  PHOSH_ROTATION_MANAGER_MODE_SENSOR,
+} PhoshRotationManagerMode;
+
+#define PHOSH_TYPE_ROTATION_MANAGER (phosh_rotation_manager_get_type ())
+
+G_DECLARE_FINAL_TYPE (PhoshRotationManager, phosh_rotation_manager, PHOSH, ROTATION_MANAGER, GObject);
+
+PhoshRotationManager *phosh_rotation_manager_new (PhoshSensorProxyManager *sensor_proxy_manager,
+                                                  PhoshLockscreenManager  *lockscreen_manager);
+void                  phosh_rotation_manager_set_orientation_locked (PhoshRotationManager *self,
+                                                                     gboolean              locked);
+gboolean              phosh_rotation_manager_get_orientation_locked (PhoshRotationManager *self);
+
+PhoshRotationManagerMode phosh_rotation_manager_get_mode (PhoshRotationManager *self);
+void                     phosh_rotation_manager_set_mode (PhoshRotationManager *self, PhoshRotationManagerMode mode);
+
+
+G_END_DECLS
diff --git a/src/shell.c b/src/shell.c
index 0bcf6558..1756acef 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -59,6 +59,7 @@
 #include "proximity.h"
 #include "quick-setting.h"
 #include "rotateinfo.h"
+#include "rotation-manager.h"
 #include "sensor-proxy-manager.h"
 #include "screen-saver-manager.h"
 #include "session-manager.h"
@@ -129,6 +130,7 @@ typedef struct
   /* sensors */
   PhoshSensorProxyManager *sensor_proxy_manager;
   PhoshProximity *proximity;
+  PhoshRotationManager *rotation_manager;
 
   gboolean startup_finished;
   PhoshMonitorTransform transform; /* current rotation of primary monitor */
@@ -372,7 +374,9 @@ phosh_shell_dispose (GObject *object)
 
   /* sensors */
   g_clear_object (&priv->proximity);
+  g_clear_object (&priv->rotation_manager);
   g_clear_object (&priv->sensor_proxy_manager);
+
   phosh_system_prompter_unregister ();
   g_clear_object (&priv->session_manager);
 
@@ -1079,6 +1083,23 @@ phosh_shell_get_session_manager (PhoshShell *self)
 }
 
 
+PhoshRotationManager *
+phosh_shell_get_rotation_manager (PhoshShell *self)
+{
+  PhoshShellPrivate *priv;
+
+  g_return_val_if_fail (PHOSH_IS_SHELL (self), NULL);
+  priv = phosh_shell_get_instance_private (self);
+
+  if (!priv->rotation_manager)
+    priv->rotation_manager = phosh_rotation_manager_new (priv->sensor_proxy_manager,
+                                                         priv->lockscreen_manager);
+
+  g_return_val_if_fail (PHOSH_IS_ROTATION_MANAGER (priv->rotation_manager), NULL);
+
+  return priv->rotation_manager;
+}
+
 /**
  * Returns the usable area in pixels usable by a client on the phone
  * display
diff --git a/src/shell.h b/src/shell.h
index 1b21eef8..d7cfcdbd 100644
--- a/src/shell.h
+++ b/src/shell.h
@@ -17,6 +17,7 @@
 #include "monitor-manager.h"
 #include "monitor/monitor.h"
 #include "osk-manager.h"
+#include "rotation-manager.h"
 #include "session-manager.h"
 #include "toplevel-manager.h"
 #include "torch-manager.h"
@@ -79,6 +80,7 @@ PhoshWifiManager    *phosh_shell_get_wifi_manager    (PhoshShell *self);
 PhoshFeedbackManager *phosh_shell_get_feedback_manager (PhoshShell *self);
 PhoshBtManager      *phosh_shell_get_bt_manager      (PhoshShell *self);
 PhoshWWan           *phosh_shell_get_wwan        (PhoshShell *self);
+PhoshRotationManager *phosh_shell_get_rotation_manager (PhoshShell *self);
 PhoshTorchManager   *phosh_shell_get_torch_manager (PhoshShell *self);
 PhoshDockedManager  *phosh_shell_get_docked_manager (PhoshShell *self);
 PhoshHksManager *    phosh_shell_get_hks_manager     (PhoshShell *self);
-- 
GitLab


From 32184e90c231886ce6c7934601afd67b32f7f3b6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Tue, 23 Jun 2020 14:08:53 +0200
Subject: [PATCH 5/6] rotateinfo: Display either rotation lock or orientation
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Based on the rotation managers mode dislay appropriate information.

Closes: #18

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/rotateinfo.c | 82 +++++++++++++++++++++++++++++++++++-------------
 src/rotateinfo.h | 16 +++++++++-
 2 files changed, 76 insertions(+), 22 deletions(-)

diff --git a/src/rotateinfo.c b/src/rotateinfo.c
index b673fa3d..1227d65d 100644
--- a/src/rotateinfo.c
+++ b/src/rotateinfo.c
@@ -15,28 +15,35 @@
 
 /**
  * SECTION:rotateinfo
- * @short_description: A widget to display the rotate status
+ * @short_description: A widget to display the rotate lock status
  * @Title: PhoshRotateInfo
  *
- * Rotate Info widget
+ * A #PhoshStatusIcon to display the rotation lock status.
+ * It can either display whether a rotation lock is currently active or
+ * if the output is in portrait/landscape mode.
  */
 
 typedef struct _PhoshRotateInfo {
-  PhoshStatusIcon parent;
+  PhoshStatusIcon     parent;
+
+  PhoshRotationManager *manager;
 } PhoshRotateInfo;
 
 
 G_DEFINE_TYPE (PhoshRotateInfo, phosh_rotate_info, PHOSH_TYPE_STATUS_ICON)
 
-
 static void
-set_state (PhoshRotateInfo *self)
+on_transform_changed (PhoshRotateInfo *self)
 {
   PhoshShell *shell = phosh_shell_get_default ();
   PhoshMonitor *monitor = phosh_shell_get_primary_monitor (shell);
   gboolean monitor_is_landscape;
   gboolean portrait;
 
+  if (phosh_rotation_manager_get_mode (self->manager) != PHOSH_ROTATION_MANAGER_MODE_OFF) {
+    return;
+  }
+
   switch (phosh_shell_get_transform (shell)) {
   case PHOSH_MONITOR_TRANSFORM_NORMAL:
   case PHOSH_MONITOR_TRANSFORM_FLIPPED:
@@ -71,37 +78,70 @@ set_state (PhoshRotateInfo *self)
 
 
 static void
-phosh_rotate_info_finalize (GObject *object)
+on_orientation_lock_changed (PhoshRotateInfo *self)
 {
-  PhoshRotateInfo *self = PHOSH_ROTATE_INFO(object);
+  gboolean locked = phosh_rotation_manager_get_orientation_locked (self->manager);
+  const char *icon_name;
 
-  g_signal_handlers_disconnect_by_data (phosh_shell_get_default (), self);
+  if (phosh_rotation_manager_get_mode (self->manager) != PHOSH_ROTATION_MANAGER_MODE_SENSOR)
+    return;
 
-  G_OBJECT_CLASS (phosh_rotate_info_parent_class)->finalize (object);
+  g_debug ("Orientation locked: %d", locked);
+
+  icon_name = locked ? "rotation-locked-symbolic" : "rotation-allowed-symbolic";
+  phosh_status_icon_set_icon_name (PHOSH_STATUS_ICON (self), icon_name);
+  /* Translators: Automatic screen orientation is either on (enabled) or off (locked/disabled) */
+  phosh_status_icon_set_info (PHOSH_STATUS_ICON (self), locked ? _("Off") : _("On"));
+
+  return;
 }
 
 
 static void
-phosh_rotate_info_class_init (PhoshRotateInfoClass *klass)
+on_mode_changed (PhoshRotateInfo *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  object_class->finalize = phosh_rotate_info_finalize;
+  PhoshRotationManagerMode mode = phosh_rotation_manager_get_mode (self->manager);
+
+  g_debug ("Rotation manager mode: %d", mode);
+  switch (mode) {
+  case PHOSH_ROTATION_MANAGER_MODE_OFF:
+    on_transform_changed (self);
+    break;
+  case PHOSH_ROTATION_MANAGER_MODE_SENSOR:
+    on_orientation_lock_changed (self);
+    break;
+  default:
+    g_assert_not_reached ();
+  }
 }
 
 
 static void
-phosh_rotate_info_init (PhoshRotateInfo *self)
+phosh_rotate_info_class_init (PhoshRotateInfoClass *klass)
 {
-  g_signal_connect_swapped (phosh_shell_get_default (),
-                            "notify::transform",
-                            G_CALLBACK (set_state),
-                            self);
-  set_state (self);
 }
 
 
-GtkWidget *
-phosh_rotate_info_new (void)
+static void
+phosh_rotate_info_init (PhoshRotateInfo *self)
 {
-  return g_object_new (PHOSH_TYPE_ROTATE_INFO, NULL);
+  self->manager = phosh_shell_get_rotation_manager (phosh_shell_get_default());
+
+  /* We don't use property bindings since we flip info/icon based on rotation and lock */
+  g_signal_connect_object (phosh_shell_get_default (),
+                           "notify::transform",
+                           G_CALLBACK (on_transform_changed),
+                           self,
+                           G_CONNECT_SWAPPED);
+  g_signal_connect_object (self->manager,
+                           "notify::orientation-locked",
+                           G_CALLBACK (on_orientation_lock_changed),
+                           self,
+                           G_CONNECT_SWAPPED);
+  g_signal_connect_object (self->manager,
+                           "notify::mode",
+                           G_CALLBACK (on_mode_changed),
+                           self,
+                           G_CONNECT_SWAPPED);
+  on_mode_changed (self);
 }
diff --git a/src/rotateinfo.h b/src/rotateinfo.h
index 2e05f818..1195fed6 100644
--- a/src/rotateinfo.h
+++ b/src/rotateinfo.h
@@ -11,10 +11,24 @@
 
 G_BEGIN_DECLS
 
+/**
+ * PhoshRotateInfoMode:
+ * @PHOSH_ROTATE_INFO_MODE_LOCK: Button toggles rotation lock
+ * @PHOSH_ROTATE_INFO_MODE_TOGGLE: Button toggles potrait/landscape
+ *
+ * The power save mode of a monitor
+ */
+typedef enum {
+  PHOSH_ROTATE_INFO_MODE_LOCK,
+  PHOSH_ROTATE_INFO_MODE_TOGGLE,
+} PhoshRotateInfoMode;
+
 #define PHOSH_TYPE_ROTATE_INFO (phosh_rotate_info_get_type())
 
 G_DECLARE_FINAL_TYPE (PhoshRotateInfo, phosh_rotate_info, PHOSH, ROTATE_INFO, PhoshStatusIcon)
 
-GtkWidget * phosh_rotate_info_new (void);
+GtkWidget           *phosh_rotate_info_new (void);
+PhoshRotateInfoMode  phosh_rotate_info_get_mode (PhoshRotateInfo *self);
+void                 phosh_rotate_info_set_mode (PhoshRotateInfo *self, PhoshRotateInfoMode mode);
 
 G_END_DECLS
-- 
GitLab


From 98e970467d5b77050469a9587dcd9da31eabe388 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Tue, 23 Jun 2020 14:10:38 +0200
Subject: [PATCH 6/6] settings: Add orientation lock to rotate quick setting
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Long press switches between potrait/landscape and rotation lock.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/settings.c          | 54 ++++++++++++++++++++++++++++++++++++++---
 src/ui/settings-menu.ui |  1 +
 2 files changed, 51 insertions(+), 4 deletions(-)

diff --git a/src/settings.c b/src/settings.c
index eb55486e..57d48182 100644
--- a/src/settings.c
+++ b/src/settings.c
@@ -20,6 +20,7 @@
 #include "feedback-manager.h"
 #include "notifications/notify-manager.h"
 #include "notifications/notification-frame.h"
+#include "rotateinfo.h"
 
 #include <pulse/pulseaudio.h>
 #include "gvc-mixer-control.h"
@@ -82,16 +83,60 @@ static void
 rotation_setting_clicked_cb (PhoshSettings *self)
 {
   PhoshShell *shell = phosh_shell_get_default ();
+  PhoshRotationManager *rotation_manager;
+  PhoshRotationManagerMode mode;
   PhoshMonitorTransform transform;
+  gboolean locked;
 
   g_return_if_fail (PHOSH_IS_SETTINGS (self));
-  transform = phosh_shell_get_transform (shell);
-  phosh_shell_set_transform (shell, transform == PHOSH_MONITOR_TRANSFORM_NORMAL
-                             ? PHOSH_MONITOR_TRANSFORM_270
-                             : PHOSH_MONITOR_TRANSFORM_NORMAL);
+
+  rotation_manager = phosh_shell_get_rotation_manager (shell);
+  g_return_if_fail (rotation_manager);
+  mode = phosh_rotation_manager_get_mode (PHOSH_ROTATION_MANAGER (rotation_manager));
+
+  switch (mode) {
+  case PHOSH_ROTATION_MANAGER_MODE_OFF:
+    transform = phosh_shell_get_transform (shell);
+    phosh_shell_set_transform (shell, transform == PHOSH_MONITOR_TRANSFORM_NORMAL
+                               ? PHOSH_MONITOR_TRANSFORM_270
+                               : PHOSH_MONITOR_TRANSFORM_NORMAL);
+    break;
+  case PHOSH_ROTATION_MANAGER_MODE_SENSOR:
+    locked = phosh_rotation_manager_get_orientation_locked (rotation_manager);
+    phosh_rotation_manager_set_orientation_locked (rotation_manager, !locked);
+    break;
+  default:
+    g_assert_not_reached ();
+  }
+
   g_signal_emit (self, signals[SETTING_DONE], 0);
 }
 
+static void
+rotation_setting_long_pressed_cb (PhoshSettings *self)
+{
+  PhoshShell *shell = phosh_shell_get_default ();
+  PhoshRotateInfoMode mode;
+  PhoshRotationManager *rotation_manager;
+
+  rotation_manager = phosh_shell_get_rotation_manager (shell);
+  g_return_if_fail (rotation_manager);
+
+  mode = phosh_rotation_manager_get_mode (rotation_manager);
+  switch (mode) {
+  case PHOSH_ROTATION_MANAGER_MODE_OFF:
+    mode = PHOSH_ROTATION_MANAGER_MODE_SENSOR;
+    break;
+  case PHOSH_ROTATION_MANAGER_MODE_SENSOR:
+    mode = PHOSH_ROTATION_MANAGER_MODE_OFF;
+    break;
+  default:
+    g_assert_not_reached ();
+  }
+  g_debug ("Rotation manager mode: %d", mode);
+  phosh_rotation_manager_set_mode (rotation_manager, mode);
+}
+
 static void
 feedback_setting_clicked_cb (PhoshSettings *self)
 {
@@ -481,6 +526,7 @@ phosh_settings_class_init (PhoshSettingsClass *klass)
   gtk_widget_class_bind_template_callback (widget_class, feedback_setting_long_pressed_cb);
   gtk_widget_class_bind_template_callback (widget_class, on_media_player_raised);
   gtk_widget_class_bind_template_callback (widget_class, rotation_setting_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, rotation_setting_long_pressed_cb);
   gtk_widget_class_bind_template_callback (widget_class, torch_setting_clicked_cb);
   gtk_widget_class_bind_template_callback (widget_class, wifi_setting_clicked_cb);
   gtk_widget_class_bind_template_callback (widget_class, wwan_setting_clicked_cb);
diff --git a/src/ui/settings-menu.ui b/src/ui/settings-menu.ui
index da196806..af7ee9ce 100644
--- a/src/ui/settings-menu.ui
+++ b/src/ui/settings-menu.ui
@@ -95,6 +95,7 @@
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
                     <signal name="clicked" handler="rotation_setting_clicked_cb" object="PhoshSettings" swapped="yes"/>
+                    <signal name="long-pressed" handler="rotation_setting_long_pressed_cb" object="PhoshSettings" swapped="yes"/>
                     <child>
                       <object class="PhoshRotateInfo" id="rotateinfo">
                         <property name="visible">True</property>
-- 
GitLab

